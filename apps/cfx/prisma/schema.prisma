// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
  binaryTargets   = ["native", "linux-musl", "windows"]
  engineType      = "binary"
  output          = "../server/.prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id               Int          @id @default(autoincrement())
  whitelisted      Boolean?
  banned           Boolean?
  character_select Int?
  last_login       String?      @db.VarChar(100)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user_ids         UserIds[]
  characters       Characters[]

  @@map("users")
}

model UserIds {
  identifier String   @id @db.VarChar(100)
  user_id    Int
  create_at  DateTime @default(now())
  update_at  DateTime @updatedAt

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_ids")
}

model Characters {
  id        Int      @id @default(autoincrement())
  user_id   Int
  create_at DateTime @default(now())
  update_at DateTime @updatedAt
  user      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  customization CharacterCustomization?
  status        CharacterStatus?
  storage       Storages?

  @@map("characters")
}

model CharacterCustomization {
  id           Int      @id @default(autoincrement())
  character_id Int      @unique
  model        Int
  components   Json
  props        Json
  faceFeatures Json
  headBlend    Json
  overlays     Json
  hairColor    Json
  eyeColor     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  character Characters @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@map("character_customization")
}

model CharacterStatus {
  id           Int      @id @default(autoincrement())
  character_id Int      @unique
  health       Int
  armour       Int
  heading      Float
  positionX    Float
  positionY    Float
  positionZ    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  character Characters @relation(fields: [character_id], references: [id], onDelete: Cascade)

  @@map("character_status")
}

model Storages {
  id      Int @id @default(autoincrement())
  size    Int
  columns Int
  rows    Int
  gap     Int

  character    Characters? @relation(fields: [character_id], references: [id], onDelete: Cascade)
  character_id Int?        @unique

  items        StorageItems[]
  storage_node StorageItemNodes?

  @@map("storages")
}

model StorageItemNodes {
  id Int @id @default(autoincrement())

  storage    Storages @relation(fields: [storage_id], references: [id], onDelete: Cascade)
  storage_id Int      @unique

  items   StorageItems? @relation(fields: [item_id], references: [id], onDelete: Cascade)
  item_id Int

  @@map("storage_nodes")
}

model StorageItems {
  id        Int @id @default(autoincrement())
  amount    Int
  width     Int
  height    Int
  positionX Int
  positionY Int

  storage    Storages? @relation(fields: [storage_id], references: [id], onDelete: Cascade)
  storage_id Int

  directory_item    DirectoryItems? @relation(fields: [directory_item_id], references: [id], onDelete: Cascade)
  directory_item_id String

  storage_node StorageItemNodes[]

  @@map("storage_items")
}

model DirectoryItems {
  id          String @id @unique
  name        String
  description String

  attributes    DirectoryItemAttributes[]
  storage_items StorageItems[]

  @@map("directory_items")
}

model DirectoryItemAttributes {
  id    Int    @id @default(autoincrement())
  name  String
  value Json

  item    DirectoryItems @relation(fields: [item_id], references: [id], onDelete: Cascade)
  item_id String

  @@map("directory_item_attributes")
}
